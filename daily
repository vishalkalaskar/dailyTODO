https://github.com/CodingLyf-Fullstack/StreamsScenarios/blob/main/StreamsOnStudentData.java
springboot annotation -https://chatgpt.com/c/682a0801-d8f4-8005-941a-83b7894cf868
https://chatgpt.com/c/680a0c8c-2400-8005-9a90-ef4523485b51
https://chatgpt.com/c/67d30f3e-347c-8005-97cd-b1713e1a4968
https://chatgpt.com/c/67c9ba5f-5d8c-8005-b532-895485deb37e
https://claude.ai/chat/ecbf1812-0d9f-42bc-9afa-51b1a6348aaf **
https://chatgpt.com/c/6837ea49-d658-8005-bd34-c3d7cbed69fd **
https://chatgpt.com/c/683aee68-a24c-8005-ba52-dc565f5b68a3
java 8 --https://chatgpt.com/c/67d122eb-4054-8005-b154-5f8ea1a5c683
kafka -https://chatgpt.com/c/681cbcb6-c5b4-8005-826b-124eb755b82d
docker -https://chatgpt.com/c/680b9d11-3768-8005-bfc3-b2231e5e6ce4

converting list to map
map<String,Strign> userMap = users.stream().collect(Collectors.toMap(User::getUsername,User::getPassword,(existign,duplicate)->existing);

1.get the list of all the products that belogns to "books" category and product price>200 using java8 features
  Product p1 = new Product(101,"java","Books",150);
  Product p2 = new Product(102,"spring","Books",350);
  Product p3 = new Product(103,""aws,"Books",450);
  Product p4 = new Product(104,"html","Books",150);
  Product p5 = new Product(105,"css","Books",110);
  Product p6 = new Product(106,"Nokia","Books",150);
  Product p7 = new Product(107,"samsung","Books",150);
   
 List<Product> prod= Arrays.asList();
List<Product> prodlist= prod.stream().filter(prod->prod.getCategory().equals("Books")&&prod.getPrice()>200).collect(Collectors.asList()).forEach(System.out::println);
    
2. find out all the numbers start with 1 using java8
 [10,13,17,56,25,11]
  List<Integer> list = Arrays.asList();
  List<Integer> listcount=list.stream().filter(num->string.valueOf(num).startWith("1")).collect(Collectors.asList()).forEach(System.out::println);
 

3.find the sudent who name star with A and marks above 70.
 student s1= new student("aryan",1,80);
 student s2= new student("ram",1,80);
 student s3= new student("sita",1,80);
 student s4= new student("sham",1,80);
 student s5= new student("ankit",1,80);
 student s6= new student("kiran",1,80);

 List<Student> stud=Arrays.asList();
 List<Student> student= Arrays.stream().filter(stud->stud.getName().startWith("A")&&stud.getMark()>70).collect(Collectors.asList()).forEach(System.out::println);

 
4.find hr deparment employe count and thier names.
List<Employee> employee=new ArrayList<Employee>();
employee.add(new employee("ABC",30,"female","HR"));
employee.add(new employee("AB",30,"female","it"));
employee.add(new employee("AC",30,"male","HR"));
employee.add(new employee("ABCd",30,"male","it"));

List<Employee> emp = employee.stream().filter(emp->emp.getDepartment().equals("HR"));
List<Employee> empplist=emp.forEach(emp->system.out.println("name"+emp.getName());
sop(emplist);
Int count=emp.stream().count().get();
sop(count):

5.odd and even for list 
List<Integer> list =Arryas.asList();
List<Integer> even = list.stream().filter(list->list%2==0).collect(Collectors.asList()).forEach(System.out::println):
List<Integer> odd =list.stream().filter(list->list%2!=0).collect(Collectors.asList()).forEach(System.out::println);

List<Integer> even = new ArraysList<>();
List<Integer> odd =new ArraysList<>();
for(Int num:list)
   if(num%2==0)
            even.add(num);
   else
         odd.add(num);


6.remove duplicate using stream api
  List<Integer> num =Arrays.asList();
  List<Integer> numlist =num.stream().distinct().collect(Collectors.asList()).forEach(System.out::println):
7. frequency of each character in a string using Java 8 streams?
   
          String inputString = "Java Concept Of The Day";

   String input = "aabbbcc";   //both are same only their are alternative approach to each others
   Map<Character,Long> map = input.chars().mapToOjb(c->(char)c).collect(Collectors.groupingBy(character->character,Collectors.counting());

character,length-->
Map<Character,Long> count= inputstring.chars().mapToObj(c->(char)c).collect(Collectros.goupingBy(Function.identity(),Collectors.counting());
sop(count):
longstring-->
Optional<String> strlen=  stringList.stream().max(Comparator.camparingInt(String::length));
sop(strlen)

8. sort the given list of decimals in reverse order?
    
    List<Double> decimalList = Arrays.asList(12.45, 23.58, 17.13, 42.89, 33.78, 71.85, 56.98, 21.12);
        
    reversoder-->dl.steam().sorted(Comparator.reversOder()).collect(Collectors.asList()).forEach(System.out::pritnln);
    naturalorder-->dl.stream().sorted(Comparator.naturalOder()).collect(Collectors.asList()).forEach(System.out::println);
    min->dl.stream().min().get();
    max->dl.stream().max().get();
    limit->dl.stream().sorted().limit(3).forEach(System.out::println);

9. Given a list of strings, join the strings with ‘[‘ as prefix, ‘]’ as suffix and ‘,’ as delimiter?
   
         List<String> listOfStrings = Arrays.asList("Facebook", "Twitter", "YouTube", "WhatsApp", "LinkedIn");
        String joinedString = listOfStrings.stream().collect(Collectors.joining(", ", "[", "]"));  
        System.out.println(joinedString);
       
        
      ListOfstring.stream().collect(Collectors.joining(",","[","]"));
      sop(joinedstring);
     
10.How do you merge two unsorted arrays into single sorted array using Java 8 streams?
        int[] a = new int[] {4, 2, 7, 1};         
        int[] b = new int[] {8, 3, 9, 5};    
         
       array-->IntStream.concat(Arrays.stream(a),Arrays.stream(b)).sorted().toArrays().collect(Collectors.asList()).forEach(System.out::println);
       twolist->Stream.concat(list1.stream(),list2.stream()).sorted().collect(Collectors.asList()).forEach(System.out::println);
       intersect-> list1.stream().filter(list2::contains).collect(Collectors.asList()).forEach(System.out::println);

11.How do you get three maximum numbers and three minimum numbers from the given list of integers?
        List<Integer> ll= Arrays.asList(45, 12, 56, 15, 24, 75, 31, 89);
       naturalorder,limit3-->ll.stream().sorted(Comaparator.nautralOder()).limit(3).collect(Collectors.toList()).forEach(System.out::println);
       reverseoder,limit3-->ll.stream().sorted(Comparator.reversOder()).limit(3).forEach(Systme.out::println);
      arraycount--> Int count = ll.stream().count().get();
     sop(count);      

12.max element in arr
List<Integer> list  = Arrays.asList();
Integer maxcount =list.stream().max(Integer::compare).get();

13. Count duplicates for String
        int[] array= {};
String[] fruits = {"apple", "apple", "banana", "grapes", "berry"};

    // Apply Stream to get distinct elements
        List<String> distinctFruits = Arrays.stream(fruits).distinct().collect(Collectors.toList()); // Collect into a list


        dp.entrySet().stream().filter(entry->entry.getValue()>1).forEach(entry->System.out.println(entry.getKey()+""+entry.getValue());
     
 // Step 2: Sort by value (frequency) in descending order and skip the first to get second most
        Optional<Map.Entry<String, Long>> secondMostFrequent = freqMap.entrySet().stream()
            .sorted(Map.Entry.<String, Long>comparingByValue().reversed())
            .skip(1)
            .findFirst();

      // Find duplicate elements
        List<String> duplicates = Arrays.stream(fruits).collect(Collectors.groupingBy(s -> s, Collectors.counting())).entrySet().stream().filter(entry -> entry.getValue() > 1) // Keep only duplicates
                .map(Map.Entry::getKey)
                .collect(Collectors.toList());

        System.out.println("Duplicate Elements: " + duplicates); // Output: [apple]
        Map<String,Long> count= Arrays.stream(array).collect(Collecors.groupingBy(Function.identity(),Collectors.counting());
        count.forEach((key,value)->system.out.println(key+'"+value+"occuers"));

   //Stream -> Declare 1 list/array having 1 to 20; calculate sum of even numbers square using stream
int sum = IntStream.rangeClosed(1, 20).filter(n -> n % 2 == 0).map(n -> n * n).sum();
System.out.println("Sum of squares of even numbers: " + sum);

//remove string from string 
import java.util.LinkedHashSet;

        String s = "welcome hi to hi hello";
        String[] words = s.split(" "); // Split by space
        
        StringBuilder ans = new StringBuilder();
        LinkedHashSet<String> uniqueWords = new LinkedHashSet<>();
        
        for (String word : words) {
            if (uniqueWords.add(word)) { // Ensures only unique words are added
                ans.append(word).append(" ");
            }
        }
        
        System.out.println(ans.toString().trim()); // Output: welcome hi to hello

14.Optimized Way to Count 1s in ArrayList java
   List<Integer> count = Arrays.asList();
   Integer oncecount= count.stream().filter(num->num==1).count().get();
   sop(oncecount);

15.  using stream() find second high element
  List<Integer> num = Arrays.asList();
  Integer maxcount = num.stream().sorted(Comparator.reversOder()).skip(1).findFirst().orElse(null);
   sop(maxcount);

16.Given a string "Welcome", write a Java program using Streams to extract and print only the odd-indexed characters.
Expected Output: Wloe
   String str = "Welcome";

        // Using Streams to extract odd-indexed characters
        String result = IntStream.range(0, str.length())
                .filter(i -> i % 2 == 0)  // Keep only even indices (0, 2, 4, ...)
                .mapToObj(str::charAt)
                .collect(StringBuilder::new, StringBuilder::append, StringBuilder::append)
                .toString();

        System.out.println(result); // Expected Output: Wloe

17.Get the length of each word from an array of strings

String[] words = {"apple", "is", "red", "fruit"};
Arrays.stream(words).map(String::length).forEach(System.out::println);

18. Print strings with length > 3
Arrays.stream(words).filter(word -> word.length() > 3).forEach(System.out::println);

19.Count vowels in a sentence:

String input = "Artificial Intelligence is Future.";
int total = 0;
Map<Character, Integer> map = new HashMap<>();
for (char c : input.toLowerCase().toCharArray()) {
    if ("aeiou".indexOf(c) != -1) {
        total++;
        map.put(c, map.getOrDefault(c, 0) + 1);
    }
}
System.out.println("Total vowels: " + total);
System.out.println(map);

20.partiton by
 new User(4,david,32)

Map<Boolean,List<User>> partitioned =users.stream().collect(Collectors.partitioningBy(user->user.getAge()>18));
sop(partitioned);

21. Find values from a map of values based on keys stored in a list
Map<String, Integer> map = Map.of("a", 1, "b", 2, "c", 3);
List<String> keys = List.of("a", "c");

List<Integer> values = keys.stream()
    .map(map::get)
    .collect(Collectors.toList());

System.out.println(values); // [1, 3]

22.Given two lists of integers, find the unique items in the two lists
List<Integer> list1 = List.of(1, 2, 3, 4);
List<Integer> list2 = List.of(3, 4, 5, 6);

Set<Integer> unique = new HashSet<>(list1);
unique.addAll(list2);

Set<Integer> common = new HashSet<>(list1);
common.retainAll(list2);

unique.removeAll(common);

System.out.println(unique); // [1, 2, 5, 6]

int[] a = {2,4,6,8,10,12};
       int[] b = {1,2,3,4,5,6,7};
      //opt int[] c ={1,3,5,8,7,10,12}
     Map<Integer,Integer> map = new HashMap<>();
     for(int val :a)
     {
         map.put(val,map.getOrDefault(val,0)+1);
     }
     
     for(int val :b)
     {
          map.put(val,map.getOrDefault(val,0)+1);
     }
     
     HashSet<Integer> set = new HashSet<>();
     for(Map.Entry<Integer,Integer> entry : map.entrySet())
     {
         if(entry.getValue()==1)
         {
             set.add(entry.getKey());
         }
     }
      
      System.out.println(set);

23.Compute division of 2 numbers irrespective of type using compile time polymorphism(method overloading)
class Divider {
    public double divide(int a, int b) { return (double) a / b; }
    public double divide(double a, double b) { return a / b; }
    public double divide(float a, float b) { return a / b; }
    public double divide(long a, long b) { return (double) a / b; }
}

Divider d = new Divider();
System.out.println(d.divide(10, 2)); // 5.0
System.out.println(d.divide(10.5, 2.0)); // 5.25

24.Write a date calculator to tell the difference between two dates and calculate a date X days in future
import java.time.LocalDate;
import java.time.temporal.ChronoUnit;

LocalDate date1 = LocalDate.of(2023, 1, 1);
LocalDate date2 = LocalDate.of(2025, 6, 7);

long diffDays = ChronoUnit.DAYS.between(date1, date2);
System.out.println("Days Difference: " + diffDays);

LocalDate futureDate = LocalDate.now().plusDays(50);
System.out.println("50 days from now: " + futureDate);

25.Find the word with minimum vowels from a sentence
method()
{
        String sentence = "sky is blue";
        String[] words = sentence.split(" ");

        int minCount = Integer.MAX_VALUE;
        String minVowelWord = "";

        for (String word : words) {
            int count = 0;
            for (char ch : word.toLowerCase().toCharArray()) {
                if ("aeiou".indexOf(ch) != -1) {
                    count++;
                }
            }

            if (count < minCount) {
                minCount = count;
                minVowelWord = word;
        }
   }
  
}

26.list of string and conver in integer  in stream api.
List<String> stringList = Arrays.asList("10", "20", "30");

List<Integer> intList = stringList.stream().map(Integer::parseInt).collect(Collectors.toList());

System.out.println(intList); // Output: [10, 20, 30]

27.give unique element and with it index using stream
List<Integer> list = Arrays.asList(1, 0, 2, 3, 4, 5, 0, 1);

        Map<Integer, Integer> uniqueWithIndex = 
            IntStream.range(0, list.size())
                     .boxed()
                     .collect(Collectors.toMap(
                         list::get,  // key = element
                         i -> i,     // value = index
                         (existing, newOne) -> existing // keep first index
                     ));

        uniqueWithIndex.forEach((k, v) -> System.out.println(k + " -> " + v));

1 -> 0
0 -> 1
2 -> 2
3 -> 3
4 -> 4
5 -> 5


 // Step 1: Count frequency of each element
        Map<Integer, Long> frequencyMap = list.stream()
                .collect(Collectors.groupingBy(e -> e, Collectors.counting()));

        // Step 2: Filter elements that occur only once and get their index
        IntStream.range(0, list.size())
                .filter(i -> frequencyMap.get(list.get(i)) == 1)
                .forEach(i -> System.out.println(list.get(i) + " -> " + i));
2 -> 2  
3 -> 3  
4 -> 4  
5 -> 5

Unique Char from String Array using Streams
Arrays.stream(strArray)
      .flatMapToInt(String::chars)
      .distinct()
      .mapToObj(c -> (char) c)
      .forEach(System.out::println);

6.code singleton class 
public class Singleton
      public static Singleton  intance=new Singleton();
     private Singleton(){};
     public static Singleton getInstance()
             return intance;
 
1.intersection of array
  method(int[]a,in[]b)
 for(i=0;i<a.length) 
     for(j=0;j<b.length)
            if(a[i]==b[j])
                sop(a[i]);

2.two array same or not
boolean method(int[]a,int[] b)
    for()
       for()
             if(a[i]!=b[i])
                 return false;
         return true;
 
3.largest
//maxmimum and min
method(int[] a)
   largest=  a[0];  
  for(i=0;i<a.length)
         if(a[i]>largest) 
             largest=a[i]; 
    sop(largest);         
//min
method(int[] a)
   min=  a[0];  
  for(i=0;i<a.length)
         if(a[i]<min) 
             min=a[i]; 
    sop(min); 

4.second largest// Ways to find 2nd highest value (without sorting):
 method(int[] a)
     int high= Integer.MIN_VALUE;
     int secHigh= Integer.MIN_VALUE;
     for(int num:a)
            if(num>high)
                 sechigh=high;
                    high=num;
       els if(num>sechigh&&num!=high)
               sechigh=num;
 sop(sechigh);
   

5.reverse
  method(in[] a)
    int end;
    for(i=0;i<end.length)
        int temp=a[i];
        a[i]=a[end];
        a[end]=temp;
      end--;

  //swaping element in array
for(i=0;i<array.length/2;i++)
   int temp =array[i];
   array[i]=array[array.length-i-1];
   array[array.length-i-1]=temp;
 
 sop(Arrays.toString(array));
7.two arr merging and sorting.
   method(int[] a,int[] b)
     int n= a.length+b.length;
     int[] newarr= new int[n];
    system.arraycopy(a,0,newarr,0,a.length);
    system.arraycopy(b,0,newarr,b.length,a.length);
    
   for(i=0;i<n)
        for(j=i+1;j<n-i-1;)
           if(newarr[j]>newarr[j+1])
                 int temp=newarr[j];
                  newarr[j]=newarr[j+1];
                   newarr[j+1]=temp;
 for(int num:newarr)
       sop(num+"");  


8.String/removing specific string
  method(String str)
       newstr;
        for()
            if(str.charAt(i)!= ch)
                     newstr=newstr+str.charAt(i):
        sop(newstr);

9.counting occurance character in string more than one
 method(String str)
     int[] a =new int[26];
     for()
        int index  = str.charAt(i)-'a';
          a[index]=a[index]+1;
    for()
          int index = str.charAt(i)-'a';
        if( a[index]==1)
             sop(str.charAt(i+"");     

//different apporach
for(int i=0;i<str.length();i++)
      int index = str.charAt(i)-'a';
      a[index]=a[index]+1;
      if(a[index]==1)//if(a[index]>1)
         sop(s.charAt(i)+"");

//s="hello'-->helo;   
method(String s) 
 int[] a = new int[26];
 StringBuilder ans = new StringBuiler();
 for(int i=0;i<s.length();i++)
      int index = s.charAt(i)-'a';
       a[index] +=1;
       if(a[index]==1)
          ans.append(s.charAt(i));
 sop(ans);

//  revers given string or sentences
String s = "mai hu na";  // na hu mai
method(String s)
        String[] word = s.split(" ");
        String[] words = s.trim().split("\\s+");   // trim to remove leading/trailing spaces
        StringBuilder ans = new StringBuilder();
        for(int i=word.length-1;i>=0;i--)
        {
             ans.append(word[i]);
             if(i!=0)
             {
                 ans.append(" ");
             }
        }
        System.out.print(ans);
}
10.reverse string
  method(String str)
         ch;
          newstr; 
         for()
           ch=str.charAt(i);
           newstr=ch+newstr;
        sop(newstr);

//alernative logic.
method(String str)
   StringBuilder ans = new StringBuilder();
    for(int i=str.length()-1;i>=0;i--)
           ans.append(str.charAt(i));
     sop(ans);

//resevers sentences
Write a function that reverses the order of words in a given string.
    Example:
        Input: "the sky is blue"
        Output: "blue is sky the"
String method(String s)
    if(s ==null)
{
       sop("String is null");
      return "String is null";
 }
else
{
 StringBuilder ans = new StringBuilder();
  String[] arr = s.split("");
  for(int i=arr.length-1;i>=0;i--)
        ans.append(arr[i]);
       if(i!=0)
           ans.append("");
}
return ans;
 sop(ans);



11.character element couting 
   method(String str)
       count;
      for()
           if(str.charAt(i)!=","&&str.charAt(i)!="")
             count++;
       sop(count);

boolean isAnagram(String str1, String str2) {
        // Remove all white spaces and convert to lowercase
        str1 = str1.replaceAll("\\s", "").toLowerCase();
        str2 = str2.replaceAll("\\s", "").toLowerCase();

        // Check if lengths are the same
        if (str1.length() != str2.length()) {
            return false;
        }

        // Convert to char arrays and sort
        char[] charArray1 = str1.toCharArray();
        char[] charArray2 = str2.toCharArray();
        Arrays.sort(charArray1);
        Arrays.sort(charArray2);

        // Compare sorted char arrays
        return Arrays.equals(charArray1, charArray2);
  
 cheking anagrram
 boolean isAnagaram(String str1,Strig str2)
        if(str1.length==str2.length)
            return false;
    
        char[] charstr1= str1.toCharArray();
       char[] charstr2 = str2.toCharArray();
       Arrays.sort(charstr1)
        Arrays.sort(charstr2);
        return Arrays.equal(charstr1,charstr2);
     
//longest substring
int substring(String s)
    if(s==null||s.isEmpty())
         return 0;

    int start=0;
    int maxlen=0;
    Hahset<Character> set = new Hashset<>();
   for(int end=0;end<s.length;end++)
             while(set.contains(s.charAt(end))
                   set.remove(s.charAt(start));
                  start++;
             set.add(s.charAt(end))
              maxlen= Math.max(maxlen,end-start+1);
    return maxlen;

//duplicat element from the array
public static int[] removeDuplicates(int[] arr) {
        // Using HashSet to store unique elements
        HashSet<Integer> uniqueElements = new HashSet<>();
        
        // Add elements to HashSet
        for (int num : arr) {
            uniqueElements.add(num);
        }
        
        // Convert HashSet back to an array
        int[] result = new int[uniqueElements.size()];
        int index = 0;
        for (int num : uniqueElements) {
            result[index++] = num;
        }
        
        return result; 
//alertantive approach

 import java.util.*;
class Main {
    public static void main(String[] args) {
        int[] arr  ={21,35,25,47,47,56,68};
        int j=0;
        for(int i=0;i<arr.length;i++)
        {
             if(arr[i]!=arr[j])
             {
                 j++;
                 int temp = arr[j];
                arr[j] = arr[i];
                arr[i]=temp;
             }
        }
        for(int i=0;i<=j;i++)
        {
            System.out.println(arr[i]+" ");
        }
    }
}

//print odd and even 
method(String str)
  StringBuilder even = new StringBuilder();
  StringBuilder odd = new StringBuilder();
  for(i=0;i<str.length();i++)
      if(i%2==0)
            even.append(str.charAt(i));
       else
           odd.append(str.charAt(i));

//map iterate
 Map<String,Intege> map = new HashMap<>();
 for(Map.Entry<String,Integer> entry : map.entrySet())
      sop(entry.getkey()+""entry.getValue());
//java8
map.forEach((Key,value)->{ system.out.println(keys+""+value) });
//Given a string, find the first non-repeating character and return it. If all characters repeat, return null
 String s = "swiss";
       // Using LinkedHashMap to maintain insertion order
        Map<Character, Integer> map = new HashMap<>();

        // Count occurrences of each character
        for (char c : str.toCharArray()) {
            map.put(c, map.getOrDefault(c, 0) + 1);
        }

        // Find the first non-repeating character
        for (Map.Entry<Character, Integer> entry : map.entrySet()) {
            if (entry.getValue() == 1) {
                System.out.println("First non-repeating character: " + entry.getKey());
                return;
            }
        }

        // If no unique character found
        System.out.println("No unique character found.");

        
13.write controller for user fetch from database.
   @RestController
public class EmployeeController {

    @Autowired
    private EmployeeService empService;

    // Get all employee data
    @GetMapping("/get/employeeData")
    public List<Employee> getEmployeeData() {
        return empService.findAll();
    }

    // Create a new employee
    @PostMapping("/create/employee")
    public String createEmployee(@RequestBody Employee employee) {
        empService.save(employee);
        return "Employee created successfully";
    }

    // Delete an employee by ID
    @DeleteMapping("/delete/employee")
    public String deleteEmployee(@RequestParam("id") String id) {
        empService.deleteById(id);
        return "Employee deleted successfully";
    }

   @PutMapping("/update/{id}")
public Employee updateEmployee(@PathVariable String id, @RequestBody Employee employee) {
    return employeeService.updateEmployee(id, employee);
}
}
//study 
You need to fetch employee details using an employeeId sent as a Path Parameter. Write the complete code from the Controller layer to the Service layer.

Assume that Department is a separate microservice. Your EmployeeService must call it to fetch additional details using the employeeId. Focus on the

 @RestController
  public class employeecontroller
          @Autowired
           private EmployeeServices empservice;
             
           @GetMapping("/empd/{emp_id}")
           public ResponesEntity<String> getEmp(@PathVariable Long id)
                   return empservice.findById(id);

           @GetMapping("/empd/{emp_id}")
           public ResponesEntity<String> getEmp(@PathVariable Long id)
                   string url = host+url.replace("id",id);
                  Httpheader header = new HttpHeader();
                 header.setContentType(MediayType.Application_JSON);
                 header.add("Authorazation","Bearer"+tokenserive.getToken());

                HttpEntity<String> entity = new HttpEnity<>(header); //(payload,header);
                RestTemplate restemp = new RestTemplate();
                String response = restemp.exchange(url,HttpMethod.GET,entity,String.class).getBody();
                return new ResponeEntity<String>(response,HttpStatus.OK);



@service
public class EmployeeService
     
 @Autowired
 private empRespo emprep;
 
 pubic String findById(Long id)
            return emprep.findById(id);

//study more in details
package com.example.demo.model;

import jakarta.persistence.*;
import lombok.*;

@Entity
@Table(name = "details")
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
public class Details {
    
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    private String name;
    private String city;
    private String email;
}

  @GetMapping("/api/details/")
  public string GetDetails(@RequestParam("id") Int id)
       {
            
          return empservice.FindById(id);
    }
         

  @GetMapping("/api/details/")
  public string GetDetails(@RequestParam("Name") String Name,@RequestParam("city") String city)
       {
            
          return empservice.GetNameandCity(Name,city);
    }

@Service
public class DetailsService {

    @Autowired
    private DetailsRepository detailsRepository;

    public Optional<Details> getDetailsById(Long id) {
        return detailsRepository.findById(id);
    }

    public List<Details> getDetailsByNameAndCity(String name, String city) {
        return detailsRepository.findByNameAndCity(name, city);
    }
}

//Repo
@Repository
public interface DetailsRepository extends JpaRepository<Details, Long> {
    Optional<Details> findById(Long id);
    List<Details> findByNameAndCity(String name, String city);

  @Query(value = "SELECT * FROM details WHERE LOWER(name) = LOWER(:name) AND LOWER(city) = LOWER(:city)", nativeQuery = true)
List<Details> findByNameAndCity(@Param("name") String name, @Param("city") String city);
}

14.Implement the crud operations.
  
 import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import java.util.List;

@Service
public class EmployeeService {

    @Autowired
    private EmployeeRepository employeeRepository;

    // Get all employees
    public List<Employee> findAll() {
        return employeeRepository.findAll();
    }

    // Save (create/update) an employee
    public Employee save(Employee employee) {
        return employeeRepository.save(employee);
    }

    // Delete an employee by ID
    public void deleteById(String id) {
        employeeRepository.deleteById(id);
    }

    // Update an existing employee
    public Employee updateEmployee(String id, Employee newEmployeeData) {
        if (!employeeRepository.existsById(id)) {
            throw new RuntimeException("Employee not found with id: " + id);
        }
        newEmployeeData.setId(id); // ✅ Set ID before saving
        return employeeRepository.save(newEmployeeData);
    }
}

15.Rest controller for fileupload.
    @RestController
     @RequestMapping("/file")
     public calss filecontroller {
            @value("${same.path}")    
            public string filedir;
          
            @PostMapping("/uploadfile")
             public ResponseEntity<String> uploadfile(@RequestParam("file") Multipart file)
            {
                    file f=new file(filedir);
                     if(!f.exits())
                           f.mkdir();
                 
                      try{
                            path filepath= paths.get(f,Files.separator+file.getFileOrginalname());
                             
                           Files.copy(file.getInputStream(),filepath,standardCopyoption.REpalce_exsting);
                            return responsEntity.ok("file upload suceess");
                   }
                    catch(IoException e)
                           e.printstackTrace();
                           return ResponseEntity.status(HTTPStuauscode.INTERNS_serv_err).body("
file not upload");
}
16.consume resapi.
   @RestController
    public class controller{
            
             @GetMapping("/somedata")
               public ResponseEntity<String> somedat(){
                      String url="https://somesite";
                      RestTemplate rt= new RestTemplate();
                      return rt.exchange(url,HTTP.GET,null,Strig.class);   (getForEntity , getForObject(url,String.class)
           }
  17.write integration test for restapi.
    Annotations and Configuration:
@SpringBootTest: Loads the application context.
@AutoConfigureMockMVC: Enables and configures MockMVC in the test context.
@RunWith(SpringRunner.class): Integrates JUnit with the Spring Test Framework (required for legacy JUnit versions; in JUnit 5, use @ExtendWith).

     @SpringBootTest
     @AutoConfigureMockMVC
     @RunWith(SpringRunner.class)  
     public class UserControllerTest{
              @Autowired
               public MockMVC mockmvc;
               
                 @Test
                 public void testGetAllUsers() throws Exception{
                                mockmvc.perform(get("/users"))
                                .andExpect(status().isOK())
                                .andExpect(content().contentType(MediaType.APPLICATION_JSON)       
                                .andExpect(jsonpath("$").isArray());
                    }}
    RestTemplate--
     @SpringBootTest(webEnvironment=SpringbootTest.WebEnvironment.RANDOM_PORT)
      classs MyControllerTest{
                @LocalServerPort
                  private int port;
                 
                  @Autowired
                  private TestRestTemplate restTemplate;
               
                  @Test
                   void testApi(){
                               String response=restTemplate.getForObject("https:/localhost:"+port+"/api/endpoint",String.class);
                               assertEquals("Eexcepted Response",response):
                  }
}
18.  scheduledTask
     @Component
       Public class taskscheduled{
           @Scheduled(FixRate=5000)                            fixdealy--it depend on pre task.
            public void scheduledtask()
                   sop("running scheduled task every 5 second");
}
9.implment cash
  @EnableCaching
  @Service
  public class userservice{
         @Cachable("users")
         public List<User> getdata()
                return repo.findAll();

          @CachEvict(value="user",allEntires=true)   @CacheEvict(value="user",allEntries=true)/@cachable("user")
         public void clearcache()
                        //clear when we need.
          //Evict
         @CacheEvict(value = "user", key = "#user.id")
 
//clear when we need.
OneToOne  user --->profile

@Entity
public class User
     @Id
     @GeneratedValue(Stragry= )
     Private Long id;
     private String name;
     
    @OneToOne(cascade=CasedType.ALL)
    @JoinColumn(value="profile_id")
    private Profile profile;

user table
  id na,e profile_Id


OneToMany--  department -->employee

@Entity
public class Department
       @id
       private Long id;
       prvate String name;
     
       OneToMany(mappedBy="Department",casecade=CascadeType.ALL)
       Private List<Employee> employee;

@Entity
public Class Employee
       
      ManyToOne
      @JoinColumn(value="deparmtent_id")
      private Department departmetn;


ManyToMany---student -->course
@Entity 
public class Student
       
    @ManyToMany(value="Student_course",JoinColumn=@JoinColumn("student_Id"))
     private List<course> course;

  
@Entity
pubic class Course
      @ManyToMany(mappendBy="course")
       private List<Student> student;

Gobal Exception handling.
public class CustomException extend RuntimeException
{
        public CustomeException(String Message)
        {
              super(Message);
        }
       public CustomeException(String Message,Thorwable cause)
         {
                 super(Message,cause);
       }


@RestControllerAdvice
public class GolableExceptionHandler{
        @ExceptionHandler(CustomException.class)
        public ResponseEntity<String> handlerException(CustomeException ex)
        {
               return  new ResponseEntity<String>(ex.getMessage(),HttpStatus.INTERNAL_SERVER_ERROR);
       }
}

@GetMapping("/{id}")
public ResponseEntity<String> getEmployee(@PathVariable Long id) {
    if (id < 0) {
        throw new CustomeException("Employee ID " + id + " does not exist.");
    }
    return ResponseEntity.ok("Employee details for ID: " + id);
}
