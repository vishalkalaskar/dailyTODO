1.get the list of all the products that belogns to "books" category and product price>200 using java8 features
  Product p1 = new Product(101,"java","Books",150);
  Product p2 = new Product(102,"spring","Books",350);
  Product p3 = new Product(103,""aws,"Books",450);
  Product p4 = new Product(104,"html","Books",150);
  Product p5 = new Product(105,"css","Books",110);
  Product p6 = new Product(106,"Nokia","Books",150);
  Product p7 = new Product(107,"samsung","Books",150);
   
 List<Product> prod= Arrays.asList();
List<Product> prodlist= prod.stream().filter(prod->prod.getCategory().equals("Books")&&prod.getPrice()>200).collect(Collectors.asList()).forEach(System.out::println);
    
2. find out all the numbers start with 1 using java8
 [10,13,17,56,25,11]
  List<Integer> list = Arrays.asList();
  List<Integer> listcount=list.stream().filter(num->string.valueOf(num).startWith("1")).collect(Collectors.asList()).forEach(System.out::println);
 

3.find the sudent who name star with A and marks above 70.
 student s1= new student("aryan",1,80);
 student s2= new student("ram",1,80);
 student s3= new student("sita",1,80);
 student s4= new student("sham",1,80);
 student s5= new student("ankit",1,80);
 student s6= new student("kiran",1,80);

 List<Student> stud=Arrays.asList();
 List<Student> student= Arrays.stream().filter(stud->stud.getName().startWith("A")&&stud.getMark()>70).collect(Collectors.asList()).forEach(System.out::println);

 
4.find hr deparment employe count and thier names.
List<Employee> employee=new ArrayList<Employee>();
employee.add(new employee("ABC",30,"female","HR"));
employee.add(new employee("AB",30,"female","it"));
employee.add(new employee("AC",30,"male","HR"));
employee.add(new employee("ABCd",30,"male","it"));

List<Employee> emp = employee.stream().filter(emp->emp.getDepartment().equals("HR"));
List<Employee> empplist=emp.forEach(emp->system.out.println("name"+emp.getName());
sop(emplist);
Int count=emp.stream().count().get();
sop(count):

5.odd and even for list 
List<Integer> list =Arryas.asList();
List<Integer> even = list.stream().filter(list->list%2==0).collect(Collectors.asList()).forEach(System.out::println):
List<Integer> odd =list.stream().filter(list->list%2!=0).collect(Collectors.asList()).forEach(System.out::println);

List<Integer> even = new ArraysList<>();
List<Integer> odd =new ArraysList<>();
for(Int num:list)
   if(num%2==0)
            even.add(num);
   else
         odd.add(num);


6.remove duplicate using stream api
  List<Integer> num =Arrays.asList();
  List<Integer> numlist =num.stream().distinct().collect(Collectors.asList()).forEach(System.out::println):
7. frequency of each character in a string using Java 8 streams?
   
          String inputString = "Java Concept Of The Day";

character,length-->
Map<Character,Long> count= inputstring.chars().maptoObj(c->(char)c).collect(Collectros.goupingBy(Function.identity(),Collectors.counting());
sop(count):
longstring-->
Optional<String> strlen=  stringList.stream().max(Comparator.camparingInt(String::length));
sop(strlen)

8. sort the given list of decimals in reverse order?
    
    List<Double> decimalList = Arrays.asList(12.45, 23.58, 17.13, 42.89, 33.78, 71.85, 56.98, 21.12);
        
    reversoder-->dl.steam().sorted(Comparator.reversOder()).collect(Collectors.asList()).forEach(System.out::pritnln);
    naturalorder-->dl.stream().sorted(Comparator.naturalOder()).collect(Collectors.asList()).forEach(System.out::println);
    min->dl.stream().min().get();
    max->dl.stream().max().get();
    limit->dl.stream().sorted().limit(3).forEach(System.out::println);

9. Given a list of strings, join the strings with ‘[‘ as prefix, ‘]’ as suffix and ‘,’ as delimiter?
   
         List<String> listOfStrings = Arrays.asList("Facebook", "Twitter", "YouTube", "WhatsApp", "LinkedIn");
        String joinedString = listOfStrings.stream().collect(Collectors.joining(", ", "[", "]"));  
        System.out.println(joinedString);
       
        
      ListOfstring.stream().collect(Collectors.joining(",","[","]"));
      sop(joinedstring);
     
10.How do you merge two unsorted arrays into single sorted array using Java 8 streams?
        int[] a = new int[] {4, 2, 7, 1};         
        int[] b = new int[] {8, 3, 9, 5};    
         
       array-->IntStream.concat(Arrays.stream(a),Arrays.stream(b)).sorted().toArrays().collect(Collectors.asList()).forEach(System.out::println);
       twolist->Stream.concat(list1.stream(),list2.stream()).sorted().collect(Collectors.asList()).forEach(System.out::println);
       intersect-> list1.stream().filter(list2::contains).collect(Collectors.asList()).forEach(System.out::println);

11.How do you get three maximum numbers and three minimum numbers from the given list of integers?
        List<Integer> ll= Arrays.asList(45, 12, 56, 15, 24, 75, 31, 89);
       naturalorder,limit3-->ll.stream().sorted(Comaparator.nautralOder()).limit(3).collect(Collectors.asList()).forEach(System.out::println);
       reverseoder,limit3-->ll.stream().sorted(Comparator.reversOder()).limit(3).collect(Collectors.asList()).forEach(Systme.out::println);
      arraycount--> Int count = ll.stream().count().get();
     sop(count);      

12.max element in arr
List<Integer> list  = Arrays.asList();
Integer maxcount =list.stream().max(Integer::compare).get();

13. Count duplicates for String
        int[] array= {};
String[] fruits = {"apple", "apple", "banana", "grapes", "berry"};

    // Apply Stream to get distinct elements
        List<String> distinctFruits = Arrays.stream(fruits).distinct().collect(Collectors.toList()); // Collect into a list

        dp.entrySet().stream().filter(entry->entry.getValue()>1).forEach(entry->System.out.println(entry.getKey()+""+entry.getValue());
     
      // Find duplicate elements
        List<String> duplicates = Arrays.stream(fruits).collect(Collectors.groupingBy(s -> s, Collectors.counting())).entrySet().stream().filter(entry -> entry.getValue() > 1) // Keep only duplicates
                .map(Map.Entry::getKey)
                .collect(Collectors.toList());

        System.out.println("Duplicate Elements: " + duplicates); // Output: [apple]
        Map<String,Long> count= Arrays.stream(array).collect(Collecors.groupingBy(Function.identity(),Collectors.counting());
        count.forEach((key,value)->system.out.println(key+'"+value+"occuers"));

   //Stream -> Declare 1 list/array having 1 to 20; calculate sum of even numbers square using stream
int sum = IntStream.rangeClosed(1, 20).filter(n -> n % 2 == 0).map(n -> n * n).sum();
System.out.println("Sum of squares of even numbers: " + sum);

//remove string from string 
import java.util.LinkedHashSet;

        String s = "welcome hi to hi hello";
        String[] words = s.split(" "); // Split by space
        
        StringBuilder ans = new StringBuilder();
        LinkedHashSet<String> uniqueWords = new LinkedHashSet<>();
        
        for (String word : words) {
            if (uniqueWords.add(word)) { // Ensures only unique words are added
                ans.append(word).append(" ");
            }
        }
        
        System.out.println(ans.toString().trim()); // Output: welcome hi to hello

14.Optimized Way to Count 1s in ArrayList java
   List<Integer> count = Arrays.asList();
   Integer oncecount= count.stream().filter(num->num==1).count().get();
   sop(oncecount);

15.  using stream() find second high element
  List<Integer> num = Arrays.asList();
  Integer maxcount = num.stream().sorted(Comparator.reversOder()).skip(1).findFirst().orElse(null);
   sop(maxcount);
  
6.code singleton class 
public class Singleton
      public static Singleton  intance=new Singleton();
     private Singleton(){};
     public static Singleton getInstance()
             return intance;
 
1.intersection of array
  method(int[]a,in[]b)
 for(i=0;i<a.length) 
     for(j=0;j<b.length)
            if(a[i]==b[j])
                sop(a[i]);

2.two array same or not
boolean method(int[]a,int[] b)
    for()
       for()
             if(a[i]!=b[i])
                 return false;
         return true;
 
3.largest
method(int[] a)
   largest=  a[0];
  for(i=0;i<a.length)
         if(a[i]>largest)
             largest=a[i];
    sop(largest);

4.second largest
 method(int[] a)
     int high= INTEGER.MIN_VALUE;
     int secHigh= INTEGER.MIN_VALUE;
     for(int num:a)
            if(num>high)
                 sechigh=high;
                    high=num;
       els if(num>sechigh&&num!=high)
               sechigh=num;
 sop(sechigh);
   

5.reverse
  method(in[] a)
    int end;
    for(i=0;i<end.length)
        int temp=a[i];
        a[i]=a[end];
        a[end]=temp;
      end--;

  //swaping element in array
for(i=0;i<array.length/2;i++)
   int temp =array[i];
   array[i]=array[array.length-i-1];
   array[array.length-i-1]=temp;
 
 sop(Arrays.toString(array));
7.two arr merging and sorting.
   method(int[] a,int[] b)
     int n= a.length+b.length;
     int[] newarr= new int[n];
    system.arraycopy(a,0,newarr,0,a.length);
    system.arraycopy(b,0,newarr,b.length,a.length);
    
   for(i=0;i<n)
        for(j=i+1;j<n-i-1;)
           if(newarr[j]>newarr[j+1])
                 int temp=newarr[j];
                  newarr[j]=newarr[j+1];
                   newarr[j+1]=temp;
 for(int num:newarr)
       sop(num+"");  


8.String/removing specific string
  method(String str)
       newstr;
        for()
            if(str.charAt(i)!= ch)
                     newstr=newstr+str.charAt(i):
        sop(newstr);

9.counting occurance character in string more than one
 method(String str)
     int[] a =new int[26];
     for()
        int index  = str.charAt(i)-'a';
          a[index]=a[index]+1;
    for()
          int index = str.charAt(i)-'a';
        if( a[index]==1)
             sop(str.charAt(i+"");     

//different apporach
for(int i=0;i<str.length();i++)
      int index = str.charAt(i)-'a';
      a[index]=a[index]+1;
      if(a[index]==1)//if(a[index]>1)
         sop(s.charAt(i)+"");


10.reverse string
  method(String str)
         ch;
          newstr; 
         for()
           ch=str.charAt(i);
           newstr=ch+newstr;
        sop(newstr);

//alernative logic.
method(String str)
   StringBuilder ans = new StringBuilder();
    for(int i=str.length()-1;i>=0;i--)
           ans.append(str.charAt(i));
     sop(ans);

11.character element couting 
   method(String str)
       count;
      for()
           if(str.charAt(i)!=","&&str.charAt(i)!="")
             count++;
       sop(count);

boolean isAnagram(String str1, String str2) {
        // Remove all white spaces and convert to lowercase
        str1 = str1.replaceAll("\\s", "").toLowerCase();
        str2 = str2.replaceAll("\\s", "").toLowerCase();

        // Check if lengths are the same
        if (str1.length() != str2.length()) {
            return false;
        }

        // Convert to char arrays and sort
        char[] charArray1 = str1.toCharArray();
        char[] charArray2 = str2.toCharArray();
        Arrays.sort(charArray1);
        Arrays.sort(charArray2);

        // Compare sorted char arrays
        return Arrays.equals(charArray1, charArray2);
  
 cheking anagrram
 boolean isAnagaram(String str1,Strig str2)
        if(str1.length==str2.length)
            return false;
    
        char[] charstr1= str1.toCharArray();
       char[] charstr2 = str2.toCharArray();
       Arrays.sort(charstr1)
        Arrays.sort(charstr2);
        return Arrays.equal(charstr1,charstr2);
     
//longest substring
int substring(String s)
    if(s==null||s.isEmpty())
         return 0;

    int start=0;
    int maxlen=0;
    Hahset<Character> set = new Hashset<>();
   for(int end=0;end<s.length;end++)
             while(set.contains(s.charAt(end))
                   set.remove(s.charAt(start));
                  start++;
             set.add(s.charAt(end))
              maxlen= Math.max(maxlen,end-start+1);
    return maxlen;

//duplicat element from the array
public static int[] removeDuplicates(int[] arr) {
        // Using HashSet to store unique elements
        HashSet<Integer> uniqueElements = new HashSet<>();
        
        // Add elements to HashSet
        for (int num : arr) {
            uniqueElements.add(num);
        }
        
        // Convert HashSet back to an array
        int[] result = new int[uniqueElements.size()];
        int index = 0;
        for (int num : uniqueElements) {
            result[index++] = num;
        }
        
        return result; 
//print odd and even 
method(String str)
  StringBuilder even = new StringBuilder();
  StringBuilder odd = new StringBuilder();
  for(i=0;i<str.length();i++)
      if(i%2==0)
            even.append(str.charAt(i));
       else
           odd.append(str.charAt(i));

//map iterate
 Map<String,Intege> map = new HashMap<>();
 for(map.Entry<String,Integer> entry = map.entrySet())
      sop(entry.getkey()+""entry.getValue());
//java8
map.forEach((Key,value)->{ system.out.println(keys+""+value) });
  
13.write controller for user fetch from database.
    @RestController
     @RequestMapping("/user")
    public class userController{
       
      @Autowired
      public UserRepository userrepo;
      
        @GetMapping("/alluserdata")
        public List<User> getAllUserData(){
                     return userrepo.findAll();
          }
}
14.Implement the crud operations.
  
 @Service
 pulic class curdservices{
       @Autowired
       public UserRepository userrepo;
        
        public User saveuser(User user){
               return userrepo.save(user);}
        
         public List<User> getAlldata(){
                   return userrepo.findAll();
             }
          
         public User updateuser(long id,User user)
                user.setId(user);
                 return userrepo.save(user);
        }
         
         public User delete(long id);{
                return userrepo.deleteById(id);  
}
15.Rest controller for fileupload.
    @RestController
     @RequestMapping("/file")
     public calss filecontroller {
            @value("${same.path}")    
            public string filedir;
          
            @PostMapping("/uploadfile")
             public ResponseEntity<String> uploadfile(@RequestParam("file") Multipart file)
            {
                    file f=new file(filedir);
                     if(!f.exits())
                           f.mkdir();
                 
                      try{
                            path filepath= paths.get(f,Files.separator+file.getFileOrginalname());
                             
                           Files.copy(file.getInputStream(),filepath,standardCopyoption.REpalce_exsting);
                            return responsEntity.ok("file upload suceess");
                   }
                    catch(IoException e)
                           e.printstackTrace();
                           return ResponseEntity.status(HTTPStuauscode.INTERNS_serv_err).body("
file not upload");
}
16.consume resapi.
   @RestController
    public class controller{
            
             @GetMapping("/somedata")
               public ResponseEntity<String> somedat(){
                      String url="https://somesite";
                      RestTemplate rt= new RestTemplate();
                      return rt.exchange(url,HTTP.GET,null,Strig.class);   (getForEntity , getForObject(url,String.class)
           }
  17.write integration test for restapi.
    Annotations and Configuration:
@SpringBootTest: Loads the application context.
@AutoConfigureMockMVC: Enables and configures MockMVC in the test context.
@RunWith(SpringRunner.class): Integrates JUnit with the Spring Test Framework (required for legacy JUnit versions; in JUnit 5, use @ExtendWith).

     @SpringBootTest
     @AutoConfigureMockMVC
     @RunWith(SpringRunner.class)  
     public class UserControllerTest{
              @Autowired
               public MockMVC mockmvc;
               
                 @Test
                 public void testGetAllUsers() throws Exception{
                                mockmvc.perform(get("/users"))
                                .andExpect(status().isOK())
                                .andExpect(content().contentType(MediaType.APPLICATION_JSON)       
                                .andExpect(jsonpath("$").isArray());
                    }}
    RestTemplate--
     @SpringBootTest(webEnvironment=SpringbootTest.WebEnvironment.RANDOM_PORT)
      classs MyControllerTest{
                @LocalServerPort
                  private int port;
                 
                  @Autowired
                  private TestRestTemplate restTemplate;
               
                  @Test
                   void testApi(){
                               String response=restTemplate.getForObject("https:/localhost:"+port+"/api/endpoint",String.class);
                               assertEquals("Eexcepted Response",response):
                  }
}
18.  scheduledTask
     @Component
       Public class taskscheduled{
           @Scheduled(FixRate=5000)                            fixdealy--it depend on pre task.
            public void scheduledtask()
                   sop("running scheduled task every 5 second");
}
9.implment cash
  @EnableCaching
  @Service
  public class userservice{
         @Cachable("users")
         public List<User> getdata()
                return repo.findAll();

          @CachEvict(value="user",allEntires=true)   @CacheEvict(value="user",allEntries=true)/@cachable("user")
         public void clearcache()
                        //clear when we need.

 
//clear when we need.
