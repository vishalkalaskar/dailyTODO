1.The program finds a pair of numbers in the sorted array whose sum is equal to the target.
class Main {
    public static void main(String[] args) {
        int[] arr = {1, 2, 5, 4, 6};
        int n = arr.length;
        int left = 0;
        int right = n - 1;
        int target = 9;

        while (left < right) {
            int sum = arr[left] + arr[right];
            
            if (sum == target) {
                System.out.println("Pair found: (" + arr[left] + ", " + arr[right] + ")");
                return; // Exit after finding the first pair
            } else if (sum < target) {
                left += 1;  // Move left pointer to increase sum
            } else {
                right -= 1; // Move right pointer to decrease sum
            }
        }

        System.out.println("No pair found with sum " + target);
    }
}

2.swap element in array.--using this logic k element sorting.
method()
 {
    int[] arr = {1,2,3,4,5};
    int left=0;
    int right =arr.length-1;
   while(left<right)   //add for loop and swaping element util i<n;
      {
         int temp =arr[left];
         arr[left]=arr[right];
         arr[right]=temp;
         left++;
         right--;
    }

}

3.write program to enter a letter and display next five letter
 input - capital W 
 output- XYZab

 input - small x
 output - yzABC
method(){
   Scanner sc = new Scanner(System.int);
   System.out.println("Enter the Character");
    char ch= sc.next().charAt(0);
    for(int i=0;i<5;i++)
    {
         ch++;
         if(ch>"z")
             {
                 ch='A';
                  system.out.print(ch+" ");
               }
        else if(ch>'Z' && ch<'a')
              ch='a';
               System.out.print(ch+" ");
       else
             System.out.print(ch+ " ");

4.Find the Avarage of all positive numbers in Array
int[] arr ={-3,-2,0,-7,25,12,-11}
37/2 = 18.5 avg
method(int[] arr)
   int sum=0;
   int count=0;
   for(int i=0;i<arr.length;i++)
      if(a[i]>0)
         sum=sum+arr[i];
          count++;
 
   if(count>0)
      double average = (double) sum/count;
      System.out.print("Avarage of positive is " + average);

5.find the sum of distinct element in array
  int[] arr={10,15,15,20,10,30};
  sum= 20+30=50;
  method(int[] arr)
    HashMap<Integer,Integer> map = new HashMap<>();
    int sum=0;
    for(int i=0;i<arr.length;i++)
        if(map.containsKey(arr[i]))
            map.put(arr[i],map.get(arr[i])+1);
        else
          map.put(arr[i],1);

    for(int key: map.keySet())
      if(map.get(key) ==1)
         sum= sum+key;
    sop(sum);

6.counting frequency of element in array
  int[] arr ={20,30,50,20,30,40};
  method(int[] arr)
    HashMap<Integer,Integer> map= new HashMap<>();
    for(int i=0;i<arr.length;i++)
        if(map.containsKey(arr[i])
           map.put(arr[i],map.get(arr[i])+1);
         else
            map.put(arr[i],1);

  7.merge two sorted  array without taking third array.
    void merge(int[] num1,int m, int[] nums2,int n)
    int p1=m-1, p2=n-1, i= m+n-1;
    while(p2>=0)
        if(p1 >=0 && nums1[p1]>nums2[p2])
            nums1[i--] = nums1[p1--];
        else
           nums1[i--]=nums2[p2--];
                
 8.merging to sorted array 
class Main {
    public static int[] merge(int[] nums1, int[] nums2) {
        int m = nums1.length, n = nums2.length;
        int[] merged = new int[m + n]; // New merged array
        int p1 = 0, p2 = 0, i = 0;

        // Merge two sorted arrays
        while (p1 < m && p2 < n) {
            if (nums1[p1] < nums2[p2]) {
                merged[i++] = nums1[p1++];
            } else {
                merged[i++] = nums2[p2++];
            }
        }

        // Copy remaining elements
        while (p1 < m) merged[i++] = nums1[p1++];
        while (p2 < n) merged[i++] = nums2[p2++];

        return merged; // Return the new array
    }

    public static void main(String[] args) {
        int[] nums1 = {1, 3, 5};
        int[] nums2 = {2, 4, 6};

        int[] result = merge(nums1, nums2);
        System.out.println(Arrays.toString(result)); // Output: [1, 2, 3, 4, 5, 6]
    }
}

9.swap n number of element in array
 import java.util.Arrays;

class Main {
    public static void swap(int[] nums) {
       int left=0;
       int right =nums.length-1;
      for(int i =0;i<2;i++)
       {
          int temp = nums[left];
          nums[left]=nums[right];
          nums[right]=temp;
          left++;
          right--;
         
       }  
    }

    public static void main(String[] args) {
        int[] nums1 = {1,2,3,4,5,6};
         swap(nums1);
        
        System.out.println(Arrays.toString(nums1));
    }
}

lefttorigth
 import java.util.Arrays;

class Main {
    public static void rotateLeft(int[] nums, int n) {
        int len = nums.length;
        n = n % len; // Handle cases where n > len
        
        // Step 1: Reverse the first 'n' elements
        reverse(nums, 0, n - 1);
        
        // Step 2: Reverse the remaining elements
        reverse(nums, n, len - 1);
        
        // Step 3: Reverse the whole array
        reverse(nums, 0, len - 1);
    }

    // Helper function to reverse elements between two indices
    private static void reverse(int[] nums, int left, int right) {
        while (left < right) {
            int temp = nums[left];
            nums[left] = nums[right];
            nums[right] = temp;
            left++;
            right--;
        }
    }

    public static void main(String[] args) {
        int[] nums1 = {1, 2, 3, 4, 5, 6};
        int n = 2;
        
        rotateLeft(nums1, n);
        
        System.out.println(Arrays.toString(nums1)); // Output: [3, 4, 5, 6, 1, 2]
    }
}

10. find the Missing element in array.
    public static void main(String[] args) {
        int[] arr = {1,2,3,5,6};
        int excp =(arr.length +1)*(arr.length+2)/2;
        int actual = Arrays.stream(arr).sum();
        System.out.println("missing number of arr "+(excp-actual));
    }

   //missing more than one in given start and end point
  public class numbers{
       public static void main(String[] args)
         {
             int start =1,end=10;
                int[] arr ={2,4,5,7,9};
              HashSet<Integer> set = new HashSet<>();
               for(int num:arr)
                    {
                      set.add(num);
                  }
              for(int i=start;i<end;i++)
                      if(!set.contains(i)
                             sop(i+"");
11.highest product 
import java.util.*;

class Main {
    public static void main(String[] args) {
        int[] a = {1, 4, 3, 6, 7, 0};
        List<Integer> newlist = new ArrayList<>();

        for (int i = 0; i < a.length; i++) {
            for (int j = i + 1; j < a.length; j++) {
                int prod = a[i] * a[j];
                
               // System.out.print(prod+" ");
                newlist.add(prod);
            }
        }

        // Find the highest product using streams
        int highprod = newlist.stream()
                              .sorted(Comparator.reverseOrder()) // Correct method name
                              .findFirst()
                              .get();

        System.out.println("Highest Product: " + highprod);
    }
}

12. sum n to m value 
// Online Java Compiler
// Use this editor to write, compile and run your Java code online
import java.util.*;
class Main {
    public static void main(String[] args) {
       int m=0;
    int n=3;
    int sum=0;
    for(int i=m;i<n;i++)
    {
        m++;
        sum=sum+m;
    }
    System.out.println("sum of 0 to 3 is " +sum);
    }
}
13.first non-reapting element for array(numbers)
// Online Java Compiler
// Use this editor to write, compile and run your Java code online
import java.util.*;
class Main {
    public static void main(String[] args) {
        int[] a= {1,2,3,5,2,3,5};
        Map<Integer,Integer> map = new HashMap<>();
        for(int n : a)
         {
             map.put(n,map.getOrDefault(n,0)+1);
         }
         
         for(Map.Entry<Integer,Integer> entry : map.entrySet())
         {
             if(entry.getValue()==1){
             System.out.print("non-reapting element "+ entry.getKey());
             }
         }
    }
}

14.string occurenace
// Online Java Compiler
// Use this editor to write, compile and run your Java code online
import java.util.*;
class Main {
    public static void main(String[] args) {
        String s = "apple banna apple grapes banna";
        Map<String,Integer>  map = new HashMap<>();
        for(String str: s.split(" "))
        {
            map.merge(str,1,Integer::sum);
        }
        System.out.println(map);
    }
}

15.array={"dog","cat","catdog","bird","fish"}  find a word that can be formed by combining two other words from same array in java

import java.util.HashSet;

public class WordCombinationFinder {
    public static void main(String[] args) {
        String[] words = {"dog", "cat", "catdog", "bird", "fish"};
        System.out.println(findConcatenatedWord(words));
    }

    public static String findConcatenatedWord(String[] words) {
        HashSet<String> wordSet = new HashSet<>();
        for (String word : words) {
            wordSet.add(word);
        }

        for (String word : words) {
            int length = word.length();
            for (int i = 1; i < length; i++) {
                String firstPart = word.substring(0, i);
                String secondPart = word.substring(i);

                if (wordSet.contains(firstPart) && wordSet.contains(secondPart)) {
                    return word;  // Return the first found concatenated word
                }
            }
        }
        return "No concatenated word found";
    }
}

