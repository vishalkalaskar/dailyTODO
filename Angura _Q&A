# Angular Interview Questions and Answers
 1. how to change root component
     to change root component have to change in below to file
        main.ts --AppComponent to loginCoponent and index.html --<app-root> to <app-login></applogin>
        main.server.ts---AppCompenent to loginPage.
2.how laod 2 css file in page
      use stylUrls:[],

3.what is Anuglar?
  Angular is component based framework for builiding structured,scalable and single page web applications for client side.
  #creating object 
   let object = new ClassName();
4.what are Angular advantages? / we can build single page application in javascript why we angulars.
  Advantage
   1. it is Relatively simple to build single page Application(component)
   2. to make flexibale ans structured application(oops friendly)
   3. it is Cross platfrom and open sources(free);
   4. Resuable code
   5. Testbilitiy(spec.ts)

5.What is differences between angular and angularjs ? or what are the advantages of angular over angularjs
   AngularJs                                                                           Angular
 1. it only supports js                                               it support both js and typescript   
 2. this frameworkd has model-view controller(MVC) architecture.      this framwork has component based architecutre.
 3. it does not have CLI tool                                         it has CLI tool
 4.it does not use Dependacy injection                                it use Dependency injection. 
 5. it does not support mobile broswers .                             it also support mobile browsers.
 6. it is not so fast                                                 it is very fast

6.what is NPM?
  NPM/Node package manger is an online repository from where you can get thousands of free libraries which can be used in your angular project.

7.what is CLI tool?
   CLI is a command-line interface tool that you use to initialized and develop angular applications.

==============================
Component & Module
==============================
8. What are components in Angular?
   - Components are the basic UI building blocks in Angular. Each component has a template, class, and metadata.

9. What is selector and template?
   - Selector: Custom HTML tag that identifies a component (e.g., <app-user>).
   - Template: Defines the HTML view of the component.

10. What is Module in Angular? What is app.module.ts?
   - Modules group related components, directives, pipes, and services.
   - AppModule (app.module.ts) is the root module where all components are declared and bootstrapped.

11. How Angular app loads?
   - index.html loads first
   - <app-root> is the selector for root component
   - main.ts bootstraps the root module

12. Bootstrap Modules & BootStrapped Component?
   - Bootstrap Module: First loaded module, typically AppModule
   - Bootstrapped Component: Root component declared inside bootstrap array

==============================
Data Binding
==============================
13. What is Data Binding?
   - Mechanism to coordinate parts of a template with parts of a component.

14. String Interpolation:
   - {{ data }} — binds component property to template.

15. Property Binding:
   - [property]="value" — sets property of HTML element.

16. Event Binding:
   - (event)="handler()" — handles DOM events.

17. Two-way Binding:
   - [(ngModel)]="value" — combines property and event binding.

==============================
Directives
==============================
18. What are Directives?
   - Instructions in DOM. Types: Structural (*ngIf, *ngFor), Attribute ([ngClass], [ngStyle]), Component.

19. *ngIf:
   - Adds/removes elements based on condition.

20. *ngFor:
   - Loops through array, creates DOM elements.

21. *ngSwitch:
   - Conditionally switches templates.

22. [ngStyle]:
   - Dynamically sets inline styles.

23. [ngClass]:
   - Dynamically sets CSS classes.

24. Difference between Directive Types:
   - Component: Has a view (template)
   - Structural: Changes DOM layout
   - Attribute: Alters DOM appearance/behavior

==============================
Decorator & Pipes
==============================
25. What is a Decorator?
   - Metadata attached to classes or properties.

26. Types of Decorators:
   - @Component, @Directive, @Injectable, @Input, @Output, @NgModule

27. What are Pipes?
   - Transform data in template. Types: Built-in (date, uppercase), Custom, Parameterized.

28. Chaining Pipes:
   - Example: {{ birthday | date:'shortDate' | uppercase }}

==============================
Services & Dependency Injection
==============================
29. Explain Services with Example:
   - Used for logic sharing across components. Created using ng generate service.

30. How to Create a Service?
   - ng generate service serviceName

31. Use of Dependency Injection:
   - Automatically provides service instances where required using constructors.

32. Hierarchical DI:
   - DI system is tree-structured; services can be scoped to modules/components.

33. What is Provider in Angular?
   - Defines how a service is created (in providers array).

34. @Injectable Decorator:
   - Marks a class as available to be provided and injected as a dependency.

==============================
Lifecycle Hooks
==============================
35. What are Parent-Child Components?
   - Nested components with data communication via @Input() and @Output().

36. Lifecycle Hooks:
   - ngOnChanges(), ngOnInit(), ngDoCheck()
   - ngAfterContentInit(), ngAfterContentChecked()
   - ngAfterViewInit(), ngAfterViewChecked()
   - ngOnDestroy()

37. What is Constructor in Angular?
   - Initializes class members, called before lifecycle hooks.

38. What is ngOnInit?
   - Called once after component's first render. Best for fetching data.

39. Constructor vs ngOnInit:
   - Constructor is for initialization; ngOnInit is for Angular-specific logic like API calls.

==============================
Observable / HttpClient / RxJS
==============================
40. What are Async Operations?
   - Tasks like API calls that don't execute immediately.

41. Promise vs Observable:
   - Promise: Eager, single value
   - Observable: Lazy, supports multiple values and cancellation

42. What is RxJS?
   - Reactive programming library used in Angular for managing streams.

43. What is Observable?
   - Provides support for passing messages/data over time.

44. Role of HttpClient:
   - Angular service to perform HTTP requests. Returns Observables.

==============================
TypeScript Basics
==============================
45. What is TypeScript?
   - Superset of JavaScript with types. Safer and supports modern features.

46. let vs var:
   - let: Block scoped
   - var: Function scoped

47. Type Annotation:
   - Specifies variable type: let age: number = 30;

48. Primitive vs Non-primitive Types:
   - Primitive: string, number, boolean, null, undefined
   - Non-primitive: arrays, objects, interfaces, classes

49. What is 'any' type?
   - Disables type checking. Use carefully.

50. What is Enum?
   - Custom named constants:
     enum Role { Admin, User }

51. Type Assertion:
   - Tells TypeScript the variable type:
     let id = <number>someValue;

52. Arrow Functions:
   - Compact syntax:
     let greet = () => console.log("Hello");


1.can you explain the concept of lazy loading in angular?
  Lazy loading is a design pattern in Angular that loads feature modules only when they are needed. 
  This improves performance by reducing the initial load time of the application. It uses the Angular
   Router to load modules asynchronously using the loadChildren property.

2. what are the change detection strategies in angular?
   Default: Checks all components from top to bottom.
   OnPush: Checks only when input references change, offering better performance.

3. how would you implement authentication and authorization in ang angular applicaton?

   Authentication: Implement using a login form that communicates with a backend service. Store the token (usually JWT) in localStorage or sessionStorage.
   Authorization: Use route guards like CanActivate to restrict access to certain routes based on roles or permissions.

4. what is  the purpose of NgModuel in Angular and how it helps with organizing the application?
   NgModule is a decorator that marks a class as an Angular module. It helps in grouping components, directives, pipes, and services, 
   making the app more modular and maintainable. It also defines the bootstrapping mechanism for the application.

5. explain the concept of dependency injection and its benefits in angulars
    Dependency injection is a design pattern in which a class receives its dependencies from an external source rather than creating them. 
    Benefits include improved modularity, easier testing, and reduced boilerplate.

6. how to create custom pipe directive and custom component directive in angular?
  #command for custome pipe
       ng generate pipe customPipeName

  custom pipe
                @Pipe({ name: 'customPipe' })
         export class CustomPipe implements PipeTransform {
           transform(value: string): string {
             return value.toUpperCase();
           }
 }
  # cusotme pis command
      ng generate directive customDirectiveName

  custome directive
           @Directive({ selector: '[appHighlight]' })
     export class HighlightDirective {
       constructor(el: ElementRef) {
         el.nativeElement.style.backgroundColor = 'yellow';
       }
     }
7. how to handle data commumincation between components that don't share a parent-child relationship?
   Use a shared service with Subject or BehaviorSubject from RxJS to create a communication bridge between unrelated components.

8. How do you handles error in angular application?

   Use HttpInterceptor to catch HTTP errors globally.
   Implement error handling in services using catchError from RxJS.
   Show user-friendly messages using a notification service or UI component.

9.explain the concepts of Observalbes and how they can be used ot handle asynchronous data?

   Observables are provided by RxJS and represent streams of asynchronous data. They can be subscribed to for real-time updates and offer powerful operators for data transformation, 
   error handling, and composition. Used with HTTP requests, forms, user input events, etc.

10.how do you impliments internalization in an angular application?

   Use Angular's built-in @angular/localize package.
   Use i18n attributes in templates and extract translatable strings.
   Generate translation files (xlf or xlf2) and provide language-specific versions.
   Configure Angular CLI with appropriate locale settings and build commands for each language.

11.what is differences betweein dependancy and devdependacy in angular?
  devDependencies
       These are packages only needed during development and not required in production builds.
   dependencies
       These are packages your application needs to run in production.





 


## Basic Angular Questions

1. **What is Angular and how does it differ from AngularJS?**
   Angular is a TypeScript-based open-source web application framework maintained by Google. It's a complete rewrite of AngularJS with better performance, mobile support, TypeScript integration, and component-based architecture.

2. **Explain the main building blocks of an Angular application.**
   Components, Modules, Templates, Directives, Services, Dependency Injection, and Routing.

3. **What is a component in Angular?**
   A component is a building block that controls a portion of the UI. It consists of a TypeScript class with a @Component decorator, an HTML template, and optional CSS styles.

4. **Describe the Angular component lifecycle hooks.**
   Main hooks include ngOnInit, ngOnChanges, ngDoCheck, ngAfterViewInit, ngAfterContentInit, ngAfterViewChecked, ngAfterContentChecked, and ngOnDestroy.

5. **What is a module in Angular? What's the difference between root module and feature module?**
   A module is a container for related components, directives, pipes, and services. The root module (AppModule) bootstraps the application, while feature modules organize code around specific functionality.

6. **How do you generate a new component using Angular CLI?**
   `ng generate component component-name` or `ng g c component-name`.

7. **What are directives in Angular? Explain the different types.**
   Directives are instructions in the DOM. Three types: Components (with templates), Structural (change DOM layout, e.g., *ngFor), and Attribute (change appearance/behavior, e.g., [ngClass]).

8. **What is data binding in Angular and what are the different types?**
   Data binding is the synchronization between model and view. Types: Interpolation {{ }}, Property binding [ ], Event binding ( ), and Two-way binding [( )].

9. **What is interpolation in Angular?**
   Interpolation uses double curly braces {{ expression }} to display component data in the view.

10. **Explain property binding and event binding.**
    Property binding [property]="expression" binds a component property to a DOM property. Event binding (event)="function()" binds a DOM event to a component method.

11. **What is two-way data binding and how is it implemented?**
    Two-way binding synchronizes data between model and view in both directions, implemented using [(ngModel)] directive.

12. **What is a pipe in Angular? Name some built-in pipes.**
    Pipes transform displayed values in templates. Built-in pipes include: DatePipe, UpperCasePipe, LowerCasePipe, CurrencyPipe, and DecimalPipe.

13. **What is a service in Angular?**
    A service is a reusable class that provides functionality across components, like data fetching, logging, or business logic.

14. **What is dependency injection in Angular?**
    Dependency injection is a design pattern where a class receives its dependencies from external sources rather than creating them internally.

15. **How do you create and consume a service?**
    Create with `ng g service service-name`, provide it using @Injectable() decorator, and inject it into component constructors.

## Intermediate Angular Questions

1. **What is Angular routing? How do you implement it?**
   Routing enables navigation between views. Implement it using RouterModule, defining routes with path and component mappings, and using router-outlet directive.

2. **What are route guards and what are the different types?**
   Route guards control access to routes. Types: CanActivate, CanActivateChild, CanDeactivate, Resolve, and CanLoad.

3. **Explain lazy loading in Angular. Why is it important?**
   Lazy loading loads feature modules only when needed, improving initial load time. Implemented with loadChildren in route configuration.

4. **What are observables in Angular? How are they different from promises?**
   Observables handle async operations and can emit multiple values over time, while promises handle single future values. Observables support operators and are cancellable.

5. **How do you handle HTTP requests in Angular?**
   Use HttpClient module to make HTTP requests, returning observable streams that can be subscribed to.

6. **What is the purpose of the HttpClient module?**
   HttpClient provides simplified API for HTTP requests with features like typed response, request/response interception, and error handling.

7. **How do you handle form validation in Angular? Compare template-driven vs reactive forms.**
   Template-driven forms use directives in templates, while reactive forms use FormGroup/FormControl classes in components. Reactive forms offer more control, testability, and scalability.

8. **What are the FormGroup and FormControl classes?**
   FormControl tracks value and validation state of form inputs. FormGroup aggregates multiple FormControls into a cohesive unit.

9. **What are validators in Angular forms?**
   Validators are functions that check form control values against specific criteria. Angular provides built-in validators like required, minLength, and pattern.

10. **What is an Angular resolver?**
    Resolvers fetch data before activating a route, ensuring data is available before a component is loaded.

11. **Explain the concept of content projection/transclusion.**
    Content projection allows inserting external content into component templates using `<ng-content>` elements.

12. **What is AOT compilation in Angular?**
    Ahead-of-Time compilation converts Angular HTML and TypeScript code into efficient JavaScript during build, before the browser downloads it.

13. **What is change detection in Angular and how does it work?**
    Change detection determines when component views need updating based on data changes. It uses a unidirectional flow and runs after every async event.

14. **What are Angular decorators? List some common decorators.**
    Decorators are functions that modify classes. Common ones: @Component, @NgModule, @Directive, @Injectable, @Input, @Output, @HostListener.

15. **What are different types of metadata in Angular?**
    Metadata includes configurations in decorators like @Component (selector, template, styles), @NgModule (declarations, imports, providers), etc.

## Advanced Angular Questions

1. **What is NgZone in Angular and when would you use it?**
   NgZone is a service for executing work inside or outside Angular's zone, used to optimize performance by controlling when change detection runs.

2. **How does change detection work in Angular? Explain OnPush strategy.**
   Default change detection checks all components on any event. OnPush strategy only triggers change detection when input references change or events occur, improving performance.

3. **What is Angular Universal? What are its benefits?**
   Angular Universal enables server-side rendering (SSR), improving SEO, performance, and social media previews by pre-rendering pages on the server.

4. **Explain the concept of tree-shakable providers.**
   Tree-shakable providers are services provided with providedIn metadata, allowing unused services to be removed during build optimization.

5. **How would you optimize performance in a large Angular application?**
   Optimization strategies: OnPush change detection, lazy loading, pure pipes, trackBy for ngFor, code splitting, AOT compilation, and tree-shaking.

6. **What is the Ivy renderer in Angular? What advantages does it offer?**
   Ivy is Angular's rendering engine with improved bundle size, better debugging, faster compilation, and incremental DOM updates.

7. **How do you implement internationalization in Angular?**
   Use Angular's i18n system with translation files, or ngx-translate library for runtime translation switching.

8. **What are custom elements and how do you create them?**
   Custom elements are reusable web components. Create them in Angular using @angular/elements package to convert components into web components.

9. **How do you implement state management in Angular? Compare NgRx, Akita, and NGXS.**
   NgRx follows Redux pattern with actions, reducers, effects, and selectors. NGXS uses a state object approach. Akita uses entity stores with less boilerplate.

10. **Explain how to create dynamic components in Angular.**
    Use ComponentFactoryResolver and ViewContainerRef to create and insert components programmatically at runtime.

11. **What is Angular Element and how does it work?**
    Angular Elements package converts Angular components into Custom Elements (Web Components) usable in non-Angular applications.

12. **How would you implement micro frontends using Angular?**
    Approaches include: module federation with Webpack 5, web components using Angular Elements, or iframe-based composition with shared services.

13. **What are the difference between pure and impure pipes?**
    Pure pipes execute only when input values change. Impure pipes execute during every change detection cycle, useful for observables or mutable data.

14. **How do you test Angular applications? Explain unit testing vs E2E testing.**
    Unit testing uses Jasmine/Karma to test components in isolation. E2E testing with Protractor/Cypress tests complete workflows from user perspective.

15. **What is Ahead-of-Time (AOT) compilation and why is it important?**
    AOT compilation converts Angular code to efficient JavaScript during build. Benefits include faster rendering, smaller package size, and better security.

## Scenario-Based Questions

1. **Performance Optimization:**
   Diagnose with Chrome DevTools, implement OnPush change detection, use trackBy with ngFor, lazy load modules, optimize change detection cycles with NgZone, virtualize long lists, and use Web Workers for CPU-intensive tasks.

2. **State Management:**
   For medium e-commerce app, use NgRx with separate stores for products, cart, and user. Create selectors for derived data and effects for API calls. Consider simpler BehaviorSubject services for less complex features.

3. **Component Communication:**
   Use @Input/@Output for parent-child communication, services with observables for distant components, and NgRx/state management for complex cases. Consider EventEmitter service for specific cross-component events.

4. **Form Validation:**
   Use reactive forms with FormBuilder, group forms by steps using FormArray, implement custom validators for complex rules, create a form service for state management, and provide visual feedback at each step.

5. **Authentication:**
   Implement JWT-based auth with HttpInterceptor for token handling, store tokens in sessionStorage, create AuthGuard for protected routes, use BehaviorSubject for user state, and handle token refresh.

6. **Error Handling:**
   Create global ErrorHandler class, use HTTP interceptors for API errors, implement retry logic for transient errors, create consistent error UI components, and log errors to monitoring service.

7. **Testing Strategy:**
   Unit test components/services with Jasmine/Karma, create shallow component tests with NO_ERRORS_SCHEMA, use TestBed for integration tests, mock external dependencies, and implement E2E tests with Cypress for critical flows.

8. **API Integration:**
   Create API service with HttpClient, implement request interceptor for auth headers, use retry operators for rate limiting, cache responses with shareReplay(), and handle token refreshing.

9. **Upgrading Angular:**
   Update incrementally using ng update, address breaking changes between versions, update RxJS usage, refactor deprecated APIs, and run extensive tests at each step.

10. **Accessibility:**
    Follow WCAG guidelines, use semantic HTML, implement ARIA attributes, ensure keyboard navigation, use Angular CDK a11y module, and test with screen readers and tools like axe.

11. **Code Organization:**
    Use feature modules with lazy loading, shared module for common components, core module for singleton services, follow Angular style guide naming conventions, and implement clean architecture with separation of concerns.

12. **Real-time Features:**
    Implement WebSockets using Socket.io or SignalR client libraries, or use server-sent events. Wrap in Angular services, use RxJS to handle streams, and optimize change detection for frequent updates.

13. **Mobile Responsiveness:**
    Use Angular Material with FlexLayout, implement responsive breakpoints, create mobile-first designs, use CSS media queries, and test on multiple devices/emulators.

14. **Legacy Code Integration:**
    Create wrapper directives for jQuery components, use ngZone.runOutsideAngular() for performance, gradually replace jQuery with Angular solutions, and use Angular's renderer for DOM manipulation.
15. **Deployment Strategy:**
    Implement GitLab/GitHub CI/CD pipeline, use environments (dev/staging/prod), implement versioning strategy, configure production builds with AOT/optimization flags, and use Docker for consistent deployment.

**Extra**
1.what is sysncronous and asyncrnous.
Synchronous tasks happen in order—you must complete the current task before moving on to the next. Asynchronous tasks are executed in any order or even at once

2.Types of form in angular?

In Angular, there are two types of forms:

Template-driven forms: These forms are based on HTML templates and are easy to build and use for simple scenarios like login forms or contact forms.

Reactive forms: These forms are built using reactive programming and are used for more complex scenarios like multi-step forms or forms that require validation and dynamic form controls. Reactive forms provide a more powerful and flexible approach to building forms in Angular.

http.get("",{}).subscribe(conifng={},erro{});   without observable
getdata():Observale{this.http.get("",data)}-->with observale
